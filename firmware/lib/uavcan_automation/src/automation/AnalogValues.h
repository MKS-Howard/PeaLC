/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __AUTOMATION_ANALOGVALUES
#define __AUTOMATION_ANALOGVALUES

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
# Shoud be dynamic array but I got coredumps with dynamic array decoding.
# 32+6 bits fit into one packet for all contexts it is used in
uint2 values_len
uint16[2] values
******************************************************************************/

/********************* DSDL signature source definition ***********************
automation.AnalogValues
saturated uint2 values_len
saturated uint16[2] values
******************************************************************************/

#define AUTOMATION_ANALOGVALUES_NAME                       "automation.AnalogValues"
#define AUTOMATION_ANALOGVALUES_SIGNATURE                  (0x192B9898F4134A94ULL)

#define AUTOMATION_ANALOGVALUES_MAX_SIZE                   ((34 + 7)/8)

// Constants

#define AUTOMATION_ANALOGVALUES_VALUES_LENGTH                                            2

typedef struct
{
    // FieldTypes
    uint8_t    values_len;                    // bit len 2
    uint16_t   values[2];                     // Static Array 16bit[2] max items

} automation_AnalogValues;

extern
uint32_t automation_AnalogValues_encode(automation_AnalogValues* source, void* msg_buf);

extern
int32_t automation_AnalogValues_decode(const CanardRxTransfer* transfer, uint16_t payload_len, automation_AnalogValues* dest, uint8_t** dyn_arr_buf);

extern
uint32_t automation_AnalogValues_encode_internal(automation_AnalogValues* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t automation_AnalogValues_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, automation_AnalogValues* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __AUTOMATION_ANALOGVALUES