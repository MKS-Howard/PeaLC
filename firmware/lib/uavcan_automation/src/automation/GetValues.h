/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 */

#ifndef __AUTOMATION_GETVALUES
#define __AUTOMATION_GETVALUES

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <automation/PortType.h>
#include <automation/ValueType.h>
#include <automation/Values.h>

/******************************* Source text **********************************
PortType port_type
uint8 index
ValueType vals_type
uint6 length

---

uint2 OK = 0
uint2 BAD_ARGUMENT = 1
uint2 HW_ERROR = 2
uint2 result

PortType port_type
uint8  index
Values values
******************************************************************************/

/********************* DSDL signature source definition ***********************
automation.GetValues
automation.PortType port_type
saturated uint8 index
automation.ValueType vals_type
saturated uint6 length
---
saturated uint2 result
automation.PortType port_type
saturated uint8 index
automation.Values values
******************************************************************************/

#define AUTOMATION_GETVALUES_ID                            200
#define AUTOMATION_GETVALUES_NAME                          "automation.GetValues"
#define AUTOMATION_GETVALUES_SIGNATURE                     (0x870C90B105F49030ULL)

#define AUTOMATION_GETVALUES_REQUEST_MAX_SIZE              ((17 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    automation_PortType port_type;                     //
    uint8_t    index;                         // bit len 8
    automation_ValueType vals_type;                     //
    uint8_t    length;                        // bit len 6

} automation_GetValuesRequest;

extern
uint32_t automation_GetValuesRequest_encode(automation_GetValuesRequest* source, void* msg_buf);

extern
int32_t automation_GetValuesRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, automation_GetValuesRequest* dest, uint8_t** dyn_arr_buf);

extern
uint32_t automation_GetValuesRequest_encode_internal(automation_GetValuesRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t automation_GetValuesRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, automation_GetValuesRequest* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define AUTOMATION_GETVALUES_RESPONSE_MAX_SIZE             ((50 + 7)/8)

// Constants
#define AUTOMATION_GETVALUES_RESPONSE_OK                                      0 // 0
#define AUTOMATION_GETVALUES_RESPONSE_BAD_ARGUMENT                            1 // 1
#define AUTOMATION_GETVALUES_RESPONSE_HW_ERROR                                2 // 2

typedef struct
{
    // FieldTypes
    uint8_t    result;                        // bit len 2
    automation_PortType port_type;                     //
    uint8_t    index;                         // bit len 8
    automation_Values values;                        //

} automation_GetValuesResponse;

extern
uint32_t automation_GetValuesResponse_encode(automation_GetValuesResponse* source, void* msg_buf);

extern
int32_t automation_GetValuesResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, automation_GetValuesResponse* dest, uint8_t** dyn_arr_buf);

extern
uint32_t automation_GetValuesResponse_encode_internal(automation_GetValuesResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t automation_GetValuesResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, automation_GetValuesResponse* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __AUTOMATION_GETVALUES